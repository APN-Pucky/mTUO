apply plugin: 'com.android.application'

def my_boost_dir = projectDir.getAbsolutePath() + "/prebuilt/1.67.0";
def my_boost_dir_libs = my_boost_dir + "/libs/llvm"
def my_boost_dir_inc = my_boost_dir + "/include"

// println '.... my message : boost_build_dir = ' + boost_build_dir

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "de.neuwirthinformatik.Alexander.mTUO"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 6
        versionName "2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                // flags for the c++ compiler eg "-std=c++14 -frtti -fexceptions"
                // If you set cppFlags to "-std=c++14", you may need to build your boost libraries
                // with the same flags, depending on your compiler defaults.
                // cppFlags "-std=c++14"

                // this causes libc++_shared.so to get packaged into .apk
                arguments '-DANDROID_STL=c++_shared'

                // This is used in CMakeLists.txt so our native code can find/use (prebuilt) boost
                arguments '-DMY_BOOST_LIBS_DIR=' + my_boost_dir_libs
                arguments '-DMY_BOOST_INC_DIR=' + my_boost_dir_inc

            }
        }

        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            // need to also have ~ boost binaries built for each abi specified here
             abiFilters 'armeabi-v7a', 'x86', 'x86_64', 'arm64-v8a'
            //abiFilters 'armeabi-v7a'
        }


    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    sourceSets {
        main {
            // Android Studio doesn't package precompiled external (*.so) libs into apk, even if linked against via "add_library (... SHARED IMPORTED) in CMakeLists.txt
            // See eg https://stackoverflow.com/questions/24357687/how-to-include-so-library-in-android-studio/29234765
            // Hopefully this will be remedied in near future.
            // As a workaroun in the meantime, need to add them manually to jniLibs.srcDirs
            // Note: This causes ALL *.so files in ABI (eg "armeabi-v7a") subdir of this dir to get packaged into .apk - relative to "app" dir
            // If you want to just include those necessary (eh chrono,, system) copy/link them to a separate dir, and reference that dir here instead.
            jniLibs.srcDirs = [
                    // should contain any external libs which should be compiled in {armeabi-v7a,arm64-v8a,x86,x86_64,mips} subdirs
                    my_boost_dir_libs

                    //, "src/main/JniLibs/boost" // could add additional dirs (with ABI subdirs) to be packaged into apk like this.
                    // Relative paths like this will be interpreted as relative to "app" dir
            ]
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.android.support:design:27.1.1'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
}

//------------------------------------------------------------
def local_props(key) { // reads ~ value from local.properties file
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def val = properties.getProperty(key, null)
    if (val == null)
        throw new GradleException("""\
                cant find value '${key}' in file 'local.properties'.  """)

    return val
}
